import { exerciseTypes, ageGroups } from '../server/config/exerciseTypes.js';
import { GeminiService } from '../server/services/geminiService.js';

// Kh·ªüi t·∫°o Gemini service
let geminiService;
try {
  geminiService = new GeminiService();
} catch (error) {
  console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Gemini Service:', error.message);
}

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  const { method } = req;

  try {
    switch (method) {
      case 'GET':
        if (req.query.action === 'types') {
          // GET /api/exercises?action=types
          const types = exerciseTypes.map(type => ({
            id: type.id,
            name: type.name,
            description: type.description,
            icon: type.icon
          }));

          res.status(200).json({
            success: true,
            data: types,
            message: 'L·∫•y danh s√°ch lo·∫°i b√†i t·∫≠p th√†nh c√¥ng'
          });
        } else if (req.query.action === 'age-groups') {
          // GET /api/exercises?action=age-groups
          res.status(200).json({
            success: true,
            data: ageGroups,
            message: 'L·∫•y danh s√°ch ƒë·ªô tu·ªïi th√†nh c√¥ng'
          });
        } else if (req.query.action === 'test-connection') {
          // GET /api/exercises?action=test-connection
          if (!geminiService) {
            return res.status(500).json({
              success: false,
              error: 'Gemini API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh'
            });
          }

          const isConnected = await geminiService.testConnection();
          
          res.status(200).json({
            success: true,
            data: {
              connected: isConnected,
              message: isConnected ? 'K·∫øt n·ªëi Gemini API th√†nh c√¥ng' : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi Gemini API'
            }
          });
        } else {
          res.status(400).json({
            success: false,
            error: 'Action kh√¥ng h·ª£p l·ªá'
          });
        }
        break;

      case 'POST':
        if (req.query.action === 'generate') {
          // POST /api/exercises?action=generate
          const { ageGroupId, exerciseTypeIds, count = 5 } = req.body;

          // Validate input
          if (!ageGroupId || !exerciseTypeIds || !Array.isArray(exerciseTypeIds)) {
            return res.status(400).json({
              success: false,
              error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: ageGroupId, exerciseTypeIds'
            });
          }

          if (!geminiService) {
            return res.status(500).json({
              success: false,
              error: 'Gemini API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra GEMINI_API_KEY.'
            });
          }

          // T√¨m age group
          const ageGroup = ageGroups.find(ag => ag.id === ageGroupId);
          if (!ageGroup) {
            return res.status(400).json({
              success: false,
              error: 'ƒê·ªô tu·ªïi kh√¥ng h·ª£p l·ªá'
            });
          }

          // T√¨m exercise types
          const selectedTypes = exerciseTypes.filter(type => 
            exerciseTypeIds.includes(type.id)
          );

          if (selectedTypes.length === 0) {
            return res.status(400).json({
              success: false,
              error: 'Kh√¥ng t√¨m th·∫•y lo·∫°i b√†i t·∫≠p ƒë∆∞·ª£c ch·ªçn'
            });
          }

          // Validate count
          const validCount = Math.min(Math.max(parseInt(count), 1), 10);
          if (isNaN(validCount)) {
            return res.status(400).json({
              success: false,
              error: 'S·ªë l∆∞·ª£ng b√†i t·∫≠p kh√¥ng h·ª£p l·ªá'
            });
          }

          console.log(`üéØ T·∫°o ${validCount} b√†i t·∫≠p cho ƒë·ªô tu·ªïi ${ageGroup.name}, lo·∫°i: ${selectedTypes.map(t => t.name).join(', ')}`);

          // T·∫°o b√†i t·∫≠p cho t·ª´ng lo·∫°i
          const allExercises = [];
          
          for (const exerciseType of selectedTypes) {
            try {
              // T·∫°o prompt cho lo·∫°i b√†i t·∫≠p n√†y
              const prompt = exerciseType.promptTemplate(ageGroup, validCount);
              
              // G·ªçi Gemini API
              const result = await geminiService.generateExercises(prompt);
              
              if (result && result.exercises) {
                // Th√™m th√¥ng tin lo·∫°i b√†i t·∫≠p v√†o m·ªói exercise
                const exercisesWithType = result.exercises.map(exercise => ({
                  ...exercise,
                  type: exerciseType.id,
                  typeName: exerciseType.name,
                  typeIcon: exerciseType.icon
                }));
                
                allExercises.push(...exercisesWithType);
              }
            } catch (typeError) {
              console.error(`‚ùå L·ªói khi t·∫°o b√†i t·∫≠p lo·∫°i ${exerciseType.name}:`, typeError.message);
              // Ti·∫øp t·ª•c v·ªõi lo·∫°i kh√°c thay v√¨ d·ª´ng to√†n b·ªô
            }
          }

          if (allExercises.length === 0) {
            return res.status(500).json({
              success: false,
              error: 'Kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.'
            });
          }

          // Tr·∫£ v·ªÅ k·∫øt qu·∫£
          res.status(200).json({
            success: true,
            data: {
              exercises: allExercises,
              metadata: {
                ageGroup: ageGroup,
                exerciseTypes: selectedTypes.map(t => ({ id: t.id, name: t.name })),
                totalCount: allExercises.length,
                generatedAt: new Date().toISOString()
              }
            },
            message: `ƒê√£ t·∫°o th√†nh c√¥ng ${allExercises.length} b√†i t·∫≠p`
          });
        } else {
          res.status(400).json({
            success: false,
            error: 'Action kh√¥ng h·ª£p l·ªá'
          });
        }
        break;

      default:
        res.setHeader('Allow', ['GET', 'POST']);
        res.status(405).json({
          success: false,
          error: `Method ${method} Not Allowed`
        });
    }
  } catch (error) {
    console.error('‚ùå L·ªói API:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói server',
      message: error.message
    });
  }
} 