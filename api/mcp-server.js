import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';

// MCP Server cho Logic Kids AI
class LogicKidsMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: 'logic-kids-ai-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
  }

  setupToolHandlers() {
    // Tool: T·∫°o b√†i t·∫≠p logic
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'generate_logic_exercise',
            description: 'T·∫°o b√†i t·∫≠p logic cho tr·∫ª em theo ƒë·ªô tu·ªïi v√† lo·∫°i b√†i t·∫≠p',
            inputSchema: {
              type: 'object',
              properties: {
                ageGroup: {
                  type: 'string',
                  description: 'ƒê·ªô tu·ªïi c·ªßa tr·∫ª (3-5, 6-8, 9-12, 13-15)',
                  enum: ['3-5', '6-8', '9-12', '13-15']
                },
                exerciseType: {
                  type: 'string',
                  description: 'Lo·∫°i b√†i t·∫≠p logic',
                  enum: ['pattern', 'sequence', 'classification', 'analogy', 'deduction']
                },
                difficulty: {
                  type: 'string',
                  description: 'ƒê·ªô kh√≥ c·ªßa b√†i t·∫≠p',
                  enum: ['easy', 'medium', 'hard']
                },
                count: {
                  type: 'number',
                  description: 'S·ªë l∆∞·ª£ng b√†i t·∫≠p c·∫ßn t·∫°o',
                  minimum: 1,
                  maximum: 10
                }
              },
              required: ['ageGroup', 'exerciseType', 'difficulty']
            }
          },
          {
            name: 'explain_exercise',
            description: 'Gi·∫£i th√≠ch c√°ch gi·∫£i b√†i t·∫≠p logic',
            inputSchema: {
              type: 'object',
              properties: {
                exercise: {
                  type: 'string',
                  description: 'N·ªôi dung b√†i t·∫≠p c·∫ßn gi·∫£i th√≠ch'
                },
                answer: {
                  type: 'string',
                  description: 'ƒê√°p √°n c·ªßa b√†i t·∫≠p'
                }
              },
              required: ['exercise', 'answer']
            }
          },
          {
            name: 'validate_answer',
            description: 'Ki·ªÉm tra ƒë√°p √°n c·ªßa h·ªçc sinh',
            inputSchema: {
              type: 'object',
              properties: {
                exercise: {
                  type: 'string',
                  description: 'N·ªôi dung b√†i t·∫≠p'
                },
                studentAnswer: {
                  type: 'string',
                  description: 'ƒê√°p √°n c·ªßa h·ªçc sinh'
                },
                correctAnswer: {
                  type: 'string',
                  description: 'ƒê√°p √°n ƒë√∫ng'
                }
              },
              required: ['exercise', 'studentAnswer', 'correctAnswer']
            }
          }
        ]
      };
    });

    // Tool: X·ª≠ l√Ω t·∫°o b√†i t·∫≠p logic
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case 'generate_logic_exercise':
          return await this.generateLogicExercise(args);
        
        case 'explain_exercise':
          return await this.explainExercise(args);
        
        case 'validate_answer':
          return await this.validateAnswer(args);
        
        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });
  }

  async generateLogicExercise(args) {
    const { ageGroup, exerciseType, difficulty, count = 1 } = args;
    
    // Logic t·∫°o b√†i t·∫≠p d·ª±a tr√™n c√°c tham s·ªë
    const exercises = [];
    
    for (let i = 0; i < count; i++) {
      const exercise = this.createExerciseByType(ageGroup, exerciseType, difficulty);
      exercises.push(exercise);
    }

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify({
            success: true,
            exercises: exercises,
            metadata: {
              ageGroup,
              exerciseType,
              difficulty,
              count,
              generatedAt: new Date().toISOString()
            }
          }, null, 2)
        }
      ]
    };
  }

  createExerciseByType(ageGroup, exerciseType, difficulty) {
    const baseExercise = {
      id: Date.now() + Math.random(),
      difficulty,
      ageGroup,
      category: exerciseType,
      createdAt: new Date().toISOString()
    };

    switch (exerciseType) {
      case 'pattern':
        return this.createPatternExercise(baseExercise, difficulty);
      case 'sequence':
        return this.createSequenceExercise(baseExercise, difficulty);
      case 'classification':
        return this.createClassificationExercise(baseExercise, difficulty);
      case 'analogy':
        return this.createAnalogyExercise(baseExercise, difficulty);
      case 'deduction':
        return this.createDeductionExercise(baseExercise, difficulty);
      default:
        return this.createPatternExercise(baseExercise, difficulty);
    }
  }

  createPatternExercise(base, difficulty) {
    const patterns = {
      easy: {
        title: 'T√¨m quy lu·∫≠t ƒë∆°n gi·∫£n',
        description: 'H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë:',
        content: `
          <div class="exercise-content">
            <h3>D√£y s·ªë: 2, 4, 6, 8, 10, ?</h3>
            <p>H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë tr√™n.</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. 11</label>
              <label><input type="radio" name="answer" value="B" /> B. 12</label>
              <label><input type="radio" name="answer" value="C" /> C. 13</label>
              <label><input type="radio" name="answer" value="D" /> D. 14</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>Quy lu·∫≠t: M·ªói s·ªë tƒÉng th√™m 2</p>
              <p>2 + 2 = 4</p>
              <p>4 + 2 = 6</p>
              <p>6 + 2 = 8</p>
              <p>8 + 2 = 10</p>
              <p>10 + 2 = 12</p>
              <p><strong>ƒê√°p √°n: B. 12</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'B'
      },
      medium: {
        title: 'T√¨m quy lu·∫≠t ph·ª©c t·∫°p',
        description: 'H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë:',
        content: `
          <div class="exercise-content">
            <h3>D√£y s·ªë: 1, 2, 4, 8, 16, ?</h3>
            <p>H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë tr√™n.</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. 24</label>
              <label><input type="radio" name="answer" value="B" /> B. 32</label>
              <label><input type="radio" name="answer" value="C" /> C. 28</label>
              <label><input type="radio" name="answer" value="D" /> D. 36</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>Quy lu·∫≠t: M·ªói s·ªë b·∫±ng s·ªë tr∆∞·ªõc ƒë√≥ nh√¢n v·ªõi 2</p>
              <p>1 √ó 2 = 2</p>
              <p>2 √ó 2 = 4</p>
              <p>4 √ó 2 = 8</p>
              <p>8 √ó 2 = 16</p>
              <p>16 √ó 2 = 32</p>
              <p><strong>ƒê√°p √°n: B. 32</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'B'
      },
      hard: {
        title: 'T√¨m quy lu·∫≠t n√¢ng cao',
        description: 'H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë:',
        content: `
          <div class="exercise-content">
            <h3>D√£y s·ªë: 1, 3, 6, 10, 15, ?</h3>
            <p>H√£y t√¨m s·ªë ti·∫øp theo trong d√£y s·ªë tr√™n.</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. 18</label>
              <label><input type="radio" name="answer" value="B" /> B. 21</label>
              <label><input type="radio" name="answer" value="C" /> C. 24</label>
              <label><input type="radio" name="answer" value="D" /> D. 28</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>Quy lu·∫≠t: M·ªói s·ªë b·∫±ng t·ªïng c·ªßa s·ªë tr∆∞·ªõc ƒë√≥ v√† v·ªã tr√≠ hi·ªán t·∫°i</p>
              <p>1 + 2 = 3</p>
              <p>3 + 3 = 6</p>
              <p>6 + 4 = 10</p>
              <p>10 + 5 = 15</p>
              <p>15 + 6 = 21</p>
              <p><strong>ƒê√°p √°n: B. 21</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'B'
      }
    };

    return { ...base, ...patterns[difficulty] };
  }

  createSequenceExercise(base, difficulty) {
    // T∆∞∆°ng t·ª± nh∆∞ pattern nh∆∞ng t·∫≠p trung v√†o th·ª© t·ª±
    return this.createPatternExercise(base, difficulty);
  }

  createClassificationExercise(base, difficulty) {
    const classifications = {
      easy: {
        title: 'Ph√¢n lo·∫°i ƒë∆°n gi·∫£n',
        description: 'H√£y ch·ªçn h√¨nh kh√¥ng c√πng nh√≥m:',
        content: `
          <div class="exercise-content">
            <h3>H√¨nh n√†o kh√¥ng c√πng nh√≥m?</h3>
            <p>üî¥ üü¢ üîµ üü° üî¥</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. üî¥ (ƒë·ªè)</label>
              <label><input type="radio" name="answer" value="B" /> B. üü¢ (xanh l√°)</label>
              <label><input type="radio" name="answer" value="C" /> C. üîµ (xanh d∆∞∆°ng)</label>
              <label><input type="radio" name="answer" value="D" /> D. üü° (v√†ng)</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>üî¥ xu·∫•t hi·ªán 2 l·∫ßn, c√°c m√†u kh√°c ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn</p>
              <p><strong>ƒê√°p √°n: A. üî¥</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'A'
      }
    };

    return { ...base, ...classifications[difficulty] };
  }

  createAnalogyExercise(base, difficulty) {
    const analogies = {
      easy: {
        title: 'T∆∞∆°ng t·ª± ƒë∆°n gi·∫£n',
        description: 'Ho√†n th√†nh c·∫∑p t∆∞∆°ng t·ª±:',
        content: `
          <div class="exercise-content">
            <h3>Ho√†n th√†nh c·∫∑p t∆∞∆°ng t·ª±:</h3>
            <p>üêï : Ch√≥ :: üê± : ?</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. M√®o</label>
              <label><input type="radio" name="answer" value="B" /> B. Chu·ªôt</label>
              <label><input type="radio" name="answer" value="C" /> C. Th·ªè</label>
              <label><input type="radio" name="answer" value="D" /> D. C√°</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>üêï l√† emoji c·ªßa ch√≥, üê± l√† emoji c·ªßa m√®o</p>
              <p><strong>ƒê√°p √°n: A. M√®o</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'A'
      }
    };

    return { ...base, ...analogies[difficulty] };
  }

  createDeductionExercise(base, difficulty) {
    const deductions = {
      easy: {
        title: 'Suy lu·∫≠n ƒë∆°n gi·∫£n',
        description: 'D·ª±a v√†o th√¥ng tin ƒë√£ cho, h√£y suy lu·∫≠n:',
        content: `
          <div class="exercise-content">
            <h3>Suy lu·∫≠n:</h3>
            <p>T·∫•t c·∫£ h·ªçc sinh l·ªõp 3A ƒë·ªÅu th√≠ch to√°n.</p>
            <p>Minh l√† h·ªçc sinh l·ªõp 3A.</p>
            <p>V·∫≠y Minh c√≥ th√≠ch to√°n kh√¥ng?</p>
            
            <div class="options">
              <label><input type="radio" name="answer" value="A" /> A. C√≥</label>
              <label><input type="radio" name="answer" value="B" /> B. Kh√¥ng</label>
              <label><input type="radio" name="answer" value="C" /> C. Kh√¥ng bi·∫øt</label>
            </div>
            
            <div class="explanation" style="display: none;">
              <h4>Gi·∫£i th√≠ch:</h4>
              <p>N·∫øu t·∫•t c·∫£ h·ªçc sinh l·ªõp 3A ƒë·ªÅu th√≠ch to√°n v√† Minh l√† h·ªçc sinh l·ªõp 3A, th√¨ Minh c≈©ng th√≠ch to√°n.</p>
              <p><strong>ƒê√°p √°n: A. C√≥</strong></p>
            </div>
          </div>
        `,
        correctAnswer: 'A'
      }
    };

    return { ...base, ...deductions[difficulty] };
  }

  async explainExercise(args) {
    const { exercise, answer } = args;
    
    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify({
            success: true,
            explanation: `Gi·∫£i th√≠ch cho b√†i t·∫≠p: ${exercise}\n\nƒê√°p √°n: ${answer}\n\nƒê√¢y l√† c√°ch gi·∫£i chi ti·∫øt...`,
            tips: [
              'ƒê·ªçc k·ªπ ƒë·ªÅ b√†i',
              'T√¨m quy lu·∫≠t ho·∫∑c m·ªëi li√™n h·ªá',
              'Ki·ªÉm tra l·∫°i ƒë√°p √°n'
            ]
          }, null, 2)
        }
      ]
    };
  }

  async validateAnswer(args) {
    const { exercise, studentAnswer, correctAnswer } = args;
    
    const isCorrect = studentAnswer.toLowerCase() === correctAnswer.toLowerCase();
    
    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify({
            success: true,
            isCorrect,
            studentAnswer,
            correctAnswer,
            feedback: isCorrect 
              ? 'Ch√≠nh x√°c! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng.' 
              : `Ch∆∞a ƒë√∫ng. ƒê√°p √°n ƒë√∫ng l√†: ${correctAnswer}`,
            explanation: isCorrect 
              ? 'B·∫°n ƒë√£ hi·ªÉu ƒë√∫ng quy lu·∫≠t c·ªßa b√†i t·∫≠p n√†y.'
              : 'H√£y xem l·∫°i c√°ch gi·∫£i v√† th·ª≠ l·∫°i nh√©!'
          }, null, 2)
        }
      ]
    };
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
  }
}

// Kh·ªüi ch·∫°y server n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  const server = new LogicKidsMCPServer();
  server.run().catch(console.error);
}

export default LogicKidsMCPServer; 