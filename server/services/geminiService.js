import axios from 'axios';

export class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.baseURL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
    
    if (!this.apiKey) {
      throw new Error('GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong environment variables');
    }
  }

  /**
   * T·∫°o b√†i t·∫≠p s·ª≠ d·ª•ng Gemini API
   * @param {string} prompt - Prompt chi ti·∫øt cho AI
   * @returns {Promise<Object>} - K·∫øt qu·∫£ t·ª´ Gemini API
   */
  async generateExercises(prompt) {
    try {
      console.log('ü§ñ ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API...');
      
      const response = await axios.post(
        `${this.baseURL}?key=${this.apiKey}`,
        {
          contents: [
            {
              parts: [
                {
                  text: prompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 30000, // 30 gi√¢y timeout
        }
      );

      if (response.data && response.data.candidates && response.data.candidates[0]) {
        const content = response.data.candidates[0].content;
        if (content && content.parts && content.parts[0]) {
          const text = content.parts[0].text;
          console.log('‚úÖ Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini API');
          
          // C·ªë g·∫Øng parse JSON t·ª´ response
          return this.parseGeminiResponse(text);
        }
      }

      throw new Error('Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');

    } catch (error) {
      console.error('‚ùå L·ªói khi g·ªçi Gemini API:', error.message);
      
      if (error.response) {
        // L·ªói t·ª´ API
        const status = error.response.status;
        const message = error.response.data?.error?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
        
        if (status === 400) {
          throw new Error('Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c·∫•u h√¨nh kh√°c.');
        } else if (status === 401) {
          throw new Error('API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.');
        } else if (status === 429) {
          throw new Error('ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else if (status >= 500) {
          throw new Error('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
          throw new Error(`L·ªói API: ${message}`);
        }
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.');
      } else {
        throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
      }
    }
  }

  /**
   * Parse response t·ª´ Gemini API
   * @param {string} text - Text response t·ª´ Gemini
   * @returns {Object} - Object ƒë√£ parse
   */
  parseGeminiResponse(text) {
    try {
      // T√¨m JSON trong response
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonString = jsonMatch[0];
        return JSON.parse(jsonString);
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y JSON, t·∫°o response m·∫´u
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON trong response, t·∫°o response m·∫´u');
      return this.createFallbackResponse(text);
      
    } catch (parseError) {
      console.error('‚ùå L·ªói parse JSON:', parseError.message);
      return this.createFallbackResponse(text);
    }
  }

  /**
   * T·∫°o response m·∫´u khi kh√¥ng parse ƒë∆∞·ª£c JSON
   * @param {string} text - Text response t·ª´ Gemini
   * @returns {Object} - Response m·∫´u
   */
  createFallbackResponse(text) {
    return {
      exercises: [
        {
          id: 1,
          question: "B√†i t·∫≠p m·∫´u",
          content: text.substring(0, 200) + "...",
          explanation: "ƒê√¢y l√† b√†i t·∫≠p ƒë∆∞·ª£c t·∫°o b·ªüi AI",
          type: "fallback"
        }
      ],
      rawResponse: text
    };
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Gemini API
   * @returns {Promise<boolean>} - True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
   */
  async testConnection() {
    try {
      const testPrompt = "T·∫°o 1 b√†i t·∫≠p ƒë·∫øm ƒë∆°n gi·∫£n cho tr·∫ª 3 tu·ªïi. Format JSON: {\"exercises\": [{\"id\": 1, \"question\": \"ƒê·∫øm s·ªë qu·∫£ t√°o:\", \"images\": [\"üçé\", \"üçé\"], \"correctAnswer\": 2, \"explanation\": \"C√≥ 2 qu·∫£ t√°o\"}]}";
      
      const result = await this.generateExercises(testPrompt);
      return result && result.exercises && result.exercises.length > 0;
    } catch (error) {
      console.error('‚ùå Test connection failed:', error.message);
      return false;
    }
  }
} 